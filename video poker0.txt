import random
import datetime
import re


def win(w, b):
    if ("2" in w and "3" in w and "4" in w and "5" in w and "6" in w) or \
            ("3" in w and "4" in w and "5" in w and "6" in w and "7" in w) or \
            ("4" in w and "5" in w and "6" in w and "7" in w and "8" in w) or \
            ("5" in w and "6" in w and "7" in w and "8" in w and "9" in w) or \
            ("6" in w and "7" in w and "8" in w and "9" in w and "10" in w) or \
            ("7" in w and "8" in w and "9" in w and "10" in w and "J" in w) or \
            ("8" in w and "9" in w and "10" in w and "J" in w and "Q" in w) or \
            ("9" in w and "10" in w and "J" in w and "Q" in w and "K" in w):
        if w.count("\u2660") == 5 or w.count("\u2661") == 5 or w.count("\u2662") == 5 or w.count("\u2663") == 5:
            return "Street Flash", b * 26
        return "Street", b * 6
    elif "10" in w and "J" in w and "Q" in w and "K" in w and "A" in w:
        if w.count("\u2660") == 5 or w.count("\u2661") == 5 or w.count("\u2662") == 5 or w.count("\u2663") == 5:
            return "Royal Flash", b * 51
        return "Street", b * 6
    elif w.count("\u2660") == 5 or w.count("\u2661") == 5 or w.count("\u2662") == 5 or w.count("\u2663") == 5:
        return "Flash", b * 6
    elif w.count("2") == 4 or w.count("3") == 4 or w.count("4") == 4 or w.count("5") == 4 or \
            w.count("6") == 4 or w.count("7") == 4 or w.count("8") == 4 or w.count("9") == 4 or \
            w.count("10") == 4 or w.count("J") == 4 or w.count("Q") == 4 or w.count("K") == 4 or w.count("A") == 4:
        return "Poker", b * 13
    elif w.count("2") == 3 or w.count("3") == 3 or w.count("4") == 3 or w.count("5") == 3 or w.count("6") == 3 or \
            w.count("7") == 3 or w.count("8") == 3 or w.count("9") == 3 or w.count("10") == 3 or w.count("J") == 3 or \
            w.count("Q") == 3 or w.count("K") == 3 or w.count("A") == 3:
        if w.count("2") == 2 or w.count("3") == 2 or w.count("4") == 2 or w.count("5") == 2 or w.count("6") == 2 or \
                w.count("7") == 2 or w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or \
                w.count("J") == 2 or w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Full House", b * 5
        return "Three of Kind", b * 4
    elif w.count("2") == 2:
        if w.count("3") == 2 or w.count("4") == 2 or w.count("5") == 2 or w.count("6") == 2 or \
                w.count("7") == 2 or w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or \
                w.count("J") == 2 or w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("3") == 2:
        if w.count("4") == 2 or w.count("5") == 2 or w.count("6") == 2 or w.count("7") == 2 or \
                w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or w.count("J") == 2 or \
                w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("4") == 2:
        if w.count("5") == 2 or w.count("6") == 2 or w.count("7") == 2 or w.count("8") == 2 or \
                w.count("9") == 2 or w.count("10") == 2 or w.count("J") == 2 or \
                w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("5") == 2:
        if w.count("6") == 2 or w.count("7") == 2 or w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or \
                w.count("J") == 2 or w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("6") == 2:
        if w.count("7") == 2 or w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or w.count("J") == 2 or \
                w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("7") == 2:
        if w.count("8") == 2 or w.count("9") == 2 or w.count("10") == 2 or w.count("J") == 2 or \
                w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("8") == 2:
        if w.count("9") == 2 or w.count("10") == 2 or w.count("J") == 2 or \
                w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("9") == 2:
        if w.count("10") == 2 or w.count("J") == 2 or w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("10") == 2:
        if w.count("J") == 2 or w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "Pair", b
    elif w.count("J") == 2:
        if w.count("Q") == 2 or w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "High Pair", b * 2
    elif w.count("Q") == 2:
        if w.count("K") == 2 or w.count("A") == 2:
            return "Two Pairs", b * 3
        return "High Pair", b * 2
    elif w.count("K") == 2:
        if w.count("A") == 2:
            return "Two Pairs", b * 3
        return "High Pair", b * 2
    elif w.count("A") == 2:
        return "High Pair", b * 2
    else:
        return "Sorry", 0


def extra_cards(e):
    if "2" in e:
        return 1
    elif "3" in e:
        return 2
    elif "4" in e:
        return 3
    elif "5" in e:
        return 4
    elif "6" in e:
        return 5
    elif "7" in e:
        return 6
    elif "8" in e:
        return 7
    elif "9" in e:
        return 8
    elif "10" in e:
        return 9
    elif "J" in e:
        return 10
    elif "Q" in e:
        return 11
    elif "K" in e:
        return 12
    else:
        return 13


def double(c):
    if extra_cards(c1[0]) > extra_cards(c2[0]):
        c *= 2
        return c
    elif extra_cards(c1[0]) == extra_cards(c2[0]):
        return c
    else:
        c *= 0
        return c


def sort_integer(sort):
    if sort.isdigit():
        return int(sort)


def sorted_scores(sort):
    return [sort_integer(i) for i in re.split(r"(\d+)", sort)]


cards = ["2\u2660", "3\u2660", "4\u2660", "5\u2660", "6\u2660", "7\u2660", "8\u2660", "9\u2660", "10\u2660", "J\u2660",
         "Q\u2660", "K\u2660", "A\u2660",
         "2\u2661", "3\u2661", "4\u2661", "5\u2661", "6\u2661", "7\u2661", "8\u2661", "9\u2661", "10\u2661", "J\u2661",
         "Q\u2661", "K\u2661", "A\u2661",
         "2\u2662", "3\u2662", "4\u2662", "5\u2662", "6\u2662", "7\u2662", "8\u2662", "9\u2662", "10\u2662", "J\u2662",
         "Q\u2662", "K\u2662", "A\u2662",
         "2\u2663", "3\u2663", "4\u2663", "5\u2663", "6\u2663", "7\u2663", "8\u2663", "9\u2663", "10\u2663", "J\u2663",
         "Q\u2663", "K\u2663", "A\u2663"]
random.shuffle(cards)
dollars = 2000
score = 1
while 0 < dollars < 1000000:
    score += 1
    cards_game = cards.copy()
    bet = int(input(f"\nYou have {dollars}$. Your bet: "))
    if dollars > bet != 0:
        dollars -= bet
    else:
        bet = dollars
        dollars = 0
    deal = []
    for i1 in range(5):
        deal.append(cards.pop())
    print("\n" + " ".join(deal))
    game = input("Throw all away - 0\nDiscard some - 3\nHold - Enter\nYour choice: ")
    if game == "3":
        for i2 in range(5):
            if input(deal[i2] + "  Hold - Enter, Throw away - 3  ") == "3":
                deal.pop(i2)
                deal.insert(i2, cards.pop())
    elif game == "0":
        deal.clear()
        for i3 in range(5):
            deal.append(cards.pop())
    hand, credit = win(" ".join(deal), bet)
    print(" ".join(deal), "----", hand, "%d$ won" % credit)
    cards = cards_game
    random.shuffle(cards)
    if credit > 0:
        if input("Extra game - 3, new deal - Enter  ") == "3":
            c1 = []
            c2 = []
            c1.append(cards.pop())
            print(c1[0], "vs. ?")
            while input("Double - 3, take money - Enter  ") == "3":
                c2.append(cards.pop())
                credit = double(credit)
                print(c1[0], "vs.", c2[0], "---- %d$" % credit)
                cards.append(c1.pop())
                cards.append(c2.pop())
                random.shuffle(cards)
                if credit > 0:
                    c1.append(cards.pop())
                    print(c1[0], "vs. ?")
                else:
                    break
            else:
                cards.append(c1.pop())
    print("%d$ won" % credit)
    dollars += credit
else:
    if dollars == 0:
        print("You are out of dollars")
    else:
        print(f"Congratulations! You have reached one million on the {score} deal.")
        name = input("Enter your name: ").replace("0", "O").replace("1", "_I_").replace("2", "_II_").\
            replace("3", "_III_").replace("4", "_IV_").replace("5", "_V_").replace("6", "_VI_").\
            replace("7", "_VII_").replace("8", "_VIII_").replace("9", "_IX_")
        leaders = [f". {name} ---  score  {score} --- {datetime.datetime.now().replace(microsecond=0)}\n"]  
        leaderboard_file = open(r"D:\Max\it\Python\my_apps\video_poker\leaderboard.txt", "r")
        with leaderboard_file:
            leader_line = (re.sub(r"(\A\d+)", "", leaderboard_file.readline()))
            while leader_line:
                leaders.append(leader_line)
                leader_line = (re.sub(r"(\A\d+)", "", leaderboard_file.readline()))
            leaders.sort(key=sorted_scores)
            leaders_numbered = []
            num = 0
            for i4 in leaders:
                leaders_numbered.append(list(i4))
                leaders_numbered[num].insert(0, str(num + 1))
                num += 1
            leaderboard_actual = []
            for i5 in leaders_numbered:
                leaderboard_actual.append("".join(i5))
            print("\n         LEADERBOARD\n\n" + "".join(leaderboard_actual))
            leaderboard_file = open(r"D:\Max\it\Python\my_apps\video_poker\leaderboard.txt", "w")
            with leaderboard_file:
                leaderboard_file.writelines(leaderboard_actual)

